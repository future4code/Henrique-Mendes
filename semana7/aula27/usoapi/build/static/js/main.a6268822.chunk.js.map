{"version":3,"sources":["Components/BordedApi.js","Components/Letras.js","App.js","serviceWorker.js","index.js"],"names":["BordedApi","props","mudaAtividadePorPessoas","event","NovoNumeroDePessoas","target","value","setState","numeroDePessoas","gerarAtividadeBotao","a","axios","get","state","response","atividadeAtual","data","recursosParaAtividade","console","log","this","type","placeholder","onChange","onClick","activity","accessibility","link","price","React","Component","Letras","gerarLetra","artistaAtual","musicaAtual","letraAtual","capturaArtista","novoArtista","capturaMusica","novaMusica","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wRAqDeA,E,YA9CX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAQVC,wBAA0B,SAACC,GACvB,IAAMC,EAAsBD,EAAME,OAAOC,MAEzC,EAAKC,SAAS,CAAEC,gBAAiBJ,KAZnB,EAelBK,oBAfkB,sBAeI,4BAAAC,EAAA,sEACKC,IAAMC,IAAN,4DAA+D,EAAKC,MAAML,kBAD/E,OACZM,EADY,OAElB,EAAKP,SAAU,CAAEQ,eAAgBD,EAASE,OAFxB,2CAblB,EAAKH,MAAQ,CACTE,eAAgB,GAChBP,gBAAiB,EACjBS,sBAAuB,GALb,E,sEAuBd,OADAC,QAAQC,IAAIC,KAAKP,MAAME,gBAEnB,6BACI,2BACIM,KAAK,SACLf,MAAOc,KAAKP,MAAML,gBAClBc,YAAY,oBACZC,SAAUH,KAAKlB,0BAEnB,4BAAQsB,QAASJ,KAAKX,qBAAtB,oBACEW,KAAKP,MAAME,gBACT,6BACI,yCAAeK,KAAKP,MAAME,eAAeU,UACzC,2CAAiBL,KAAKP,MAAME,eAAeW,eAC3C,oCAAUN,KAAKP,MAAME,eAAeM,MACpC,oCAAUD,KAAKP,MAAME,eAAeY,MACpC,mCAASP,KAAKP,MAAME,eAAea,a,GAvCnCC,IAAMC,WCyDfC,E,YAzDX,WAAY9B,GAAO,IAAD,8BACd,4CAAMA,KAQV+B,WATkB,sBASL,4BAAAtB,EAAA,sEACcC,IAAMC,IAAN,UAbf,4BAae,YAAwB,EAAKC,MAAMoB,aAAnC,YAAmD,EAAKpB,MAAMqB,cAD5E,OACHpB,EADG,OAGT,EAAKP,SAAU,CAAE4B,WAAYrB,EAASE,OAH7B,2CATK,EAelBoB,eAAiB,SAACjC,GACd,IAAMkC,EAAclC,EAAME,OAAOC,MAEjC,EAAKC,SAAS,CAAE0B,aAAaI,KAlBf,EAqBlBC,cAAgB,SAACnC,GACb,IAAMoC,EAAapC,EAAME,OAAOC,MAEhC,EAAKC,SAAS,CAAE2B,YAAYK,KAtB5B,EAAK1B,MAAQ,CACTsB,WAAW,GACXF,aAAc,GACdC,YAAa,IALH,E,sEAgCd,OACI,6BACI,2BACIb,KAAK,OACLC,YAAY,kBACZhB,MAAOc,KAAKP,MAAMoB,aAClBV,SAAUH,KAAKgB,iBAEnB,6BACA,6BACA,2BACIf,KAAK,OACLC,YAAY,iBACZhB,MAAOc,KAAKP,MAAMqB,YAClBX,SAAUH,KAAKkB,gBAEnB,4BAAQd,QAASJ,KAAKY,YAAtB,+BACCZ,KAAKP,MAAMoB,cAAgBb,KAAKP,MAAMqB,aACnC,2BAAId,KAAKP,MAAMsB,iB,GAnDdN,IAAMC,WCuBZU,E,YArBb,WAAYvC,GAAO,IAAD,8BAChB,4CAAMA,KACCY,MAAQ,GAFC,E,sEAQd,OACE,6BACE,sDACA,kBAAC,EAAD,MACA,6BACA,6DACA,kBAAC,EAAD,W,GAfQgB,IAAMC,WCMJW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.a6268822.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nconst baseUrl = \"http://www.boredapi.com/api/activity/\"\r\n\r\nclass BordedApi extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            atividadeAtual: \"\",\r\n            numeroDePessoas: 1,\r\n            recursosParaAtividade: 0,\r\n        }\r\n    }\r\n\r\n    mudaAtividadePorPessoas = (event) => {\r\n        const NovoNumeroDePessoas = event.target.value;\r\n\r\n        this.setState({ numeroDePessoas: NovoNumeroDePessoas })\r\n    }\r\n\r\n    gerarAtividadeBotao = async () => {\r\n        const response = await axios.get(`http://www.boredapi.com/api/activity?participants=${this.state.numeroDePessoas}`)\r\n        this.setState ({ atividadeAtual: response.data });\r\n    }\r\n\r\n\r\n    render(){\r\n        console.log(this.state.atividadeAtual)\r\n        return(\r\n            <div>\r\n                <input \r\n                    type=\"number\"\r\n                    value={this.state.numeroDePessoas}\r\n                    placeholder=\"numero de pessoas\"\r\n                    onChange={this.mudaAtividadePorPessoas}\r\n                />\r\n                <button onClick={this.gerarAtividadeBotao}>Gerar atividade!</button>\r\n                { this.state.atividadeAtual &&\r\n                    <div>\r\n                        <p>Atividade: {this.state.atividadeAtual.activity}</p>\r\n                        <p>Dificuldade: {this.state.atividadeAtual.accessibility}</p>\r\n                        <p>Tipo: {this.state.atividadeAtual.type}</p>\r\n                        <p>link: {this.state.atividadeAtual.link}</p>\r\n                        <p>$$$: {this.state.atividadeAtual.price}</p>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BordedApi;\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import styled from 'styled-components';\r\n// import axios from 'axios';\r\n\r\n// const baseURL = \"http://www.boredapi.com/api/activity/\";\r\n\r\n// class BoredAPI extends Component {\r\n//     constructor(props){\r\n//         super(props);\r\n\r\n//         this.state = {\r\n//             currentActivity: {}\r\n//         }\r\n//     }\r\n\r\n//     componentDidMount(){\r\n//         this.getRandomActivity();\r\n//     }\r\n\r\n//     getRandomActivity = async () => {\r\n//         // Usando o axios para bater na API do BoredAPI\r\n//         // no endpoint que retorna uma atividade aleatória\r\n//         const response = await axios.get(baseURL);\r\n        \r\n//         this.setState({ currentActivity: response.data })\r\n//     }\r\n\r\n//     render() {\r\n//         return(\r\n//             <div>\r\n//                 <button onClick={this.getRandomActivity}>Sortear atividade aleatória</button>\r\n//                 <h1>Nome: { this.state.currentActivity.activity }</h1>\r\n//                 <h2>Categoria: { this.state.currentActivity.type }</h2>\r\n//                 <h3>Número de Participantes: { this.state.currentActivity.participants }</h3>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// export default BoredAPI;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = \"https://api.lyrics.ovh/v1\"\r\n\r\nclass Letras extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            letraAtual:\"\",\r\n            artistaAtual: \"\",\r\n            musicaAtual: \"\",\r\n        }\r\n    }\r\n\r\n    gerarLetra = async () => {\r\n        const response = await axios.get(`${baseUrl}/${this.state.artistaAtual}/${this.state.musicaAtual}`)\r\n\r\n        this.setState ({ letraAtual: response.data });\r\n    }    \r\n\r\n    capturaArtista = (event) => {\r\n        const novoArtista = event.target.value;\r\n\r\n        this.setState({ artistaAtual:novoArtista });\r\n    }\r\n\r\n    capturaMusica = (event) => {\r\n        const novaMusica = event.target.value;\r\n\r\n        this.setState({ musicaAtual:novaMusica });\r\n    }\r\n\r\n    // mostraLetra = () => {\r\n\r\n    // }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Nome do artista\"\r\n                    value={this.state.artistaAtual}\r\n                    onChange={this.capturaArtista}\r\n                />\r\n                <br/>\r\n                <br/>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"Nome do musica\"\r\n                    value={this.state.musicaAtual}\r\n                    onChange={this.capturaMusica}\r\n                />\r\n                <button onClick={this.gerarLetra}>Procurar letra da música</button>\r\n                {this.state.artistaAtual && this.state.musicaAtual &&\r\n                    <p>{this.state.letraAtual}</p>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Letras;","import React from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components'\nimport BordedApi from './Components/BordedApi';\nimport Letras from './Components/Letras';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n      this.state = {\n        \n      }\n    }\n\n    render(){\n      return(\n        <div>\n          <h1> Dicas de tempo livro </h1>\n          <BordedApi/>\n          <br/>\n          <p>Decore uma letra de música!</p>\n          <Letras/>\n        </div>\n      );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}